(load "test.scm")

(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((equal? x (car set)) #t)
        (else (element-of-set? x (cdr set)))
        )
  )

(define (adjoin-set x set)
  (if (element-of-set? x set)
      set
      (cons x set)
      )
  )

(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2)
         (cons (car set1) (intersection-set (cdr set1) set2)) 
         )
        (else (intersection-set (cdr set1) set2))
        )
  )

(define (union-set set1 set2)
  (cond ((and (null? set1) (null? set2)) '())
        ((null? set1) set2)
        ((null? set2) set1)
        (else (adjoin-set (car set1) (union-set (cdr set1) set2)))
        ) 
  )


(define (dup-element-of-set? x set)
  (cond ((null? set) #f)
        ((equal? x (car set)) #t)
        (else (dup-element-of-set? x (cdr set)))
        )
  )

(define (dup-adjoin-set x set)  
  (cons x set)      
  )

(define (remove-element-set x set)
  (if (null? set)
      '()
      (if (equal? x (car set))
          (remove-element-set x (cdr set))
          (cons (car set) (remove-element-set x (cdr set)))
          )
      )
  )

(define (dup-intersection-set set1 set2) 
  (cond ((or (null? set1) (null? set2)) '())
        ((dup-element-of-set? (car set1) set2)
         (cons (car set1) 
               (dup-intersection-set (cdr set1) 
                                     (remove-element-set (car set1) set2)))
         )
        (else (dup-intersection-set (cdr set1) set2))
        )
  )

(define (dup-union-set set1 set2)
  (append set1 set2)
  )

(define x '(1 2 3 4))
(define y '(4 5 6 7))
(define z '(2 2 2 4 5 6 1 1 2))
(define a '(2 3 4 5 1 2 2))

(define (test)
  (testing (list (adjoin-set 10 x)
                 (adjoin-set 10 y)
                 (element-of-set? 4 x)
                 (element-of-set? 3 y)
                 (intersection-set x y)
                 (union-set x y)
                 (remove-element-set 2 z)
                 (dup-intersection-set z a)
                 )
           )
  )