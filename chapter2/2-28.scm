(define nil '())

(define (list-ref items n)
  (if (= n 0)
      (car items)
      (list-ref (cdr items) (- n 1))
      )
  )

(define (length items)
  (if (null? items)
      0
      (+ 1 (length (cdr items)))
      )
  )

(define (append x y)
  (if (null? x)
      y
      (cons (car x) (append (cdr x) y))
      )
  )

(define (last-pair x)
  (list-ref x (- (length x) 1))  
  )

(define (reverse x)
  (define (iter items result)    
    (if (null? items)
        result
        (iter (cdr items) (cons (car items) result))
        )
    )
  (iter x nil)
  )

(define (deep-reverse x)
  (define (iter items result)    
    (if (null? items)
        result
        (if (pair? (car items))
            (iter (cdr items) (cons (iter (car items) nil) result))
            (iter (cdr items) (cons (car items) result))            
            )    
        )
    )
  (iter x nil)
  )

(define (no-more? l)
  (if (= (length l) 0) #t #f)
  )

(define (same-parity p . l)
  (define (iter iter-l)
    (cond ((null? iter-l) nil)
          ((or (and (even? p) (even? (car iter-l))) 
               (and (odd? p) (odd? (car iter-l))))    
           (cons (car iter-l) (iter (cdr iter-l)) )
           )
          (else (iter (cdr iter-l)))
        )
    )
  (cons p (iter l))
  )

(define (fringe items)
  (define (fringe-recur items result)
    (cond ((null? items) result)
          ((not (pair? (car items))) items)
          (else
           (fringe-recur (cdr items) 
                         (append result (fringe-recur (car items) (list ))))
           )
          )
    )
  (fringe-recur items (list ))
  )


(define x '(1 2 3 4))
(define y '(2 6 7 8))
(define z (append x y))

(define (test)
  (newline)
  (display (list-ref x 2))
  (newline)
  (display (length x))
  (newline)
  (display (append x y))
  (newline)
  (display (last-pair x))
  (newline)
  (display (last-pair y))
  (newline)
  (display (reverse z))
  (newline)
  (display (same-parity 1 2 3 4 5 6 7 8))
  (newline)
  (display (same-parity 2 2 3 4 5 6 7 8))
  (newline)
  (display (deep-reverse (list x y)))
  (newline)
  (display (fringe (list (list x y) (list x y))))
  )