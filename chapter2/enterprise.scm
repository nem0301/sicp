(load "test.scm")
(load "putget.scm")
(load "tag.scm")
(load "deploy.scm")

(define (apply-generic op name file)  
  (let ((division-name (type-tag file)))
    (let ((proc (get op division-name)))
      (if proc
          (proc name (contents file))
          (error "no file")                    
          )
      )
    )  
  )

(define (install-div1-package)
  ; internal procedures
  (define (record-name record)
    (car record))
  (define (record-address record)
    (cadr record))
  (define (record-salary record)
    (caddr record))
      
    
  (define (get-record name file)  
    (cond ((null? file) '())
          ((eq? name (record-name (car file))) 
           (cons (car file) (get-record name (cdr file))))
          (else (get-record name (cdr file)))
          )
    )  
  (define (get-salary name file)    
    (cond ((null? file) '())
          ((eq? name (record-name (car file))) 
           (cons (record-salary (car file)) (get-salary name (cdr file))))
          (else (get-salary name (cdr file)))
          )
   )
  (define (make-file file) file)
  
  ; interface to the rest of the system
  (define (tag x) (attach-tag 'div1 x))
  (put 'get-record 'div1 get-record)
  (put 'get-salary 'div1 get-salary)  
  (put 'make-file 'div1
       (lambda (file) (tag (make-file file))))
  'done   
  )

(define (install-div2-package)
  ; internal procedures
  (define (record-name record)
    (car record))
  (define (record-address record)
    (cadr record))
  (define (record-salary record)
    (caddr record))
      
    
  (define (get-record name file)  
    (cond ((null? file) '())
          ((eq? name (record-name (car file))) 
           (cons (car file) (get-record name (cdr file))))
          (else (get-record name (cdr file)))
          )
    )  
  (define (get-salary name file)    
    (cond ((null? file) '())
          ((eq? name (record-name (car file))) 
           (cons (record-salary (car file)) (get-salary name (cdr file))))
          (else (get-salary name (cdr file)))
          )
   )  
  (define (make-file file) file)
  
  ; interface to the rest of the system
  (define (tag x) (attach-tag 'div2 x))
  (put 'get-record 'div2 get-record)
  (put 'get-salary 'div2 get-salary)  
  (put 'make-file 'div2
       (lambda (file) (tag (make-file file))))
  'done   
  )

(define (make-file-div1 file)
  (let ((proc (get 'make-file 'div1)))
    (if proc
        (proc file)
        (error "div1" proc)
        )
    )  
  )

(define (make-file-div2 file)
  (let ((proc (get 'make-file 'div2)))
    (if proc
        (proc file)
        (error "div2" proc)
        )
    )  
  )

(define file-1 '())
(define file-2 '())
(define (insert-record record file)
  (cons record file)
  )

(define (get-record name file)
  (apply-generic 'get-record name file))
(define (get-salary name file)
  (apply-generic 'get-salary name file))

(define (find-employee-record name files)
  (cond ((null? files) '())
        (else (append (get-record name (car files)) 
                      (find-employee-record name (cdr files))))                  
        )
  )

(display "-------install package---------") (newline) 
(install-div1-package)
(install-div2-package)
(display "----------------------------") (newline)
(display "---------deploy-------------") (newline)
(deploy global-array)
(display "----------------------------") (newline)

(display "---------insert-------------") (newline)
(set! file-1 (insert-record (list 'david 'incheon 30000) file-1))
(set! file-1 (insert-record (list 'ina 'ilsac 100000) file-1))
(set! file-1 (insert-record (list 'shin 'seoul 20000) file-1))
(set! file-1 (make-file-div1 file-1))
(set! file-2 (insert-record (list 'alyssa 'incheon 30000) file-2))
(set! file-2 (insert-record (list 'ben 'ilsac 100000) file-2))
(set! file-2 (insert-record (list 'david 'seoul 20000) file-2))
(set! file-2 (make-file-div1 file-2))
(define files (list file-1 file-2))
(display "----------------------------") (newline)

(display "-----------file-------------") (newline)
(display file-1)
(newline)
(display "----------------------------") (newline)
(newline)

(define (test)
  (testing (list (get-record 'david file-1)
                 (get-salary 'david file-1)
                 (find-employee-record 'david files)
                 ))
  )